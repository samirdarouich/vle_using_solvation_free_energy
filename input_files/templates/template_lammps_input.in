# Using scaled soft core potentials for free energy calculations

# Define general settings

units real
dimension 3
boundary p p p
atom_style      full

# Define bond, angle, and dihedral style

{%if set.style.bond|length > 0%}bond_style    {{set.style.bond|join(' ')}}{%- endif %}
{%if set.style.angle|length > 0%}angle_style    {{set.style.angle|join(' ')}}{%- endif %}
{%if set.style.dihedral|length > 0%}dihedral_style    {{set.style.dihedral|join(' ')}}{%- endif %}

# Define pair style and further settings

pair_style {{set.style.pair_style}}
pair_modify mix {{set.style.mixing}} tail {{set.style.tail}}

# Define the neighbor list settings

neighbor 2.0 bin
neigh_modify every 1 delay 0 check yes 

# Define special bonds to scale 1-2, 1-3, or 1-4 vdW / Coulomb pair interactions

special_bonds lj {{set.sp_bond.vdw|join(' ')}}  coul {{set.sp_bond.coulomb|join(' ')}}

# Define if new simulation (0) or read restart (1)

variable restart equal {{set.restart}}

if "${restart} == 1" then "read_restart {{set.restart_file}}" else "read_data       {{set.data_file}}"

# Van der Waals interactions
{% for p in set.style.pairs %}
pair_coeff  {{p.i}} {{p.j}}  mie/cut {{p.epsilon}} {{p.sigma}} {{p.m}} 6.0 # {{p.name}}
{%- endfor %}

{%if not set.style.uncharged %}
# Coulombic interactions

pair_coeff  * * coul/long

# Long range coulombic interaction solver

kspace_style pppm 1e-5
{%- endif %}

# ============= INITIAL SYSTEM SETUP AND EQUILIBRATION =============

# ------------- general ---------------

variable  timestep            equal       {{set.timestep}}

timestep  ${timestep}

# ------------- set ensemble settings ---------------

# seed value should be passed as variable in job file
variable  seed                index       12345                                      
variable  temperature         equal       {{set.temperature}}
variable  pressure            equal       {{set.pressure}}

# ------------- generate velocities ---------------

if "${restart} == 0" then "velocity        all create ${temperature} ${seed} rot yes dist gaussian"

{%- if set.shake.values()|map('length')|select('>', 0)|first %}
# ------------- shake algorithm ---------------

fix rigid all shake 0.001 100 0 {%- for s in set.shake %}{%- if set.shake[s]|length > 0%} {{s}} {{set.shake[s]|join(' ')}} {%- endif %}{%- endfor %} 
{%- endif %}

# ------------- set integration settings ---------------

{% if set.ensemble == 'NVT' %}
fix             int_nvt all nvt temp ${temperature} ${temperature} $(100.0*v_timestep) 
{%- elif set.ensemble == 'NPT' %}
fix             int_npt all npt temp ${temperature} ${temperature} $(100.0*v_timestep)  iso ${pressure} ${pressure} $(1000.0*v_timestep)
{%- endif %}

# ------------- equilibrate system ---------------

thermo          10000
run             {{set.equiltime}}
if "${restart} == 0" then "write_restart   {{set.restart_file}} "
reset_timestep  0 

# ============= VARIABLES ===============

# ------------- general ---------------

variable  run_time            equal       {{set.runtime}}

# ------------- output ---------------

variable  sample_frequency    equal       {{set.sample_frequency}}
variable  sample_number       equal       {{set.sample_number}}
variable  to_file_every       equal       $(v_sample_frequency*v_sample_number)
variable  to_screen_every     equal       $(v_to_file_every*10)
      
# ------------- values ---------------

variable step equal step

# ============= SAMPLING CONDITIONS ============= 

thermo          ${to_screen_every}
thermo_style    custom step temp press pe ke etotal enthalpy vol density 

# Pressure, mass density, and potential energy sampling

variable press equal press
variable mass_dens equal density
variable pot_eng equal pe

fix sampling all ave/time ${sample_frequency} ${sample_number} ${to_file_every} v_press v_mass_dens v_pot_eng file values.sampling

# ============= RUN CONDITIONS =============

run             ${run_time}